/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.tsp.gespro.jdbc;

import com.tsp.gespro.dao.*;
import com.tsp.gespro.factory.*;
import java.util.Date;
import com.tsp.gespro.dto.*;
import com.tsp.gespro.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class EstanteriaDaoImpl extends AbstractDAO implements EstanteriaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_ESTANTERIA, ID_EMPRESA, ID_ESTATUS, ID_CLIENTE, ID_CONCEPTO, ID_USUARIO, CANTIDAD, PRECIO, FECHA, NOMBRE_EMBALAJE, FECHA_CADUCIDAD,UNIDADES_ALMACEN, PRECIO_OFERTA FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_ESTANTERIA, ID_EMPRESA, ID_ESTATUS, ID_CLIENTE, ID_CONCEPTO, ID_USUARIO, CANTIDAD, PRECIO, FECHA, NOMBRE_EMBALAJE, FECHA_CADUCIDAD,UNIDADES_ALMACEN, PRECIO_OFERTA ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_ESTANTERIA = ?, ID_EMPRESA = ?, ID_ESTATUS = ?, ID_CLIENTE = ?, ID_CONCEPTO = ?, ID_USUARIO = ?, CANTIDAD = ?, PRECIO = ?, FECHA = ?, NOMBRE_EMBALAJE = ?, FECHA_CADUCIDAD = ?, UNIDADES_ALMACEN = ?, PRECIO_OFERTA = ? WHERE ID_ESTANTERIA = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_ESTANTERIA = ?";

	/** 
	 * Index of column ID_ESTANTERIA
	 */
	protected static final int COLUMN_ID_ESTANTERIA = 1;

	/** 
	 * Index of column ID_EMPRESA
	 */
	protected static final int COLUMN_ID_EMPRESA = 2;

	/** 
	 * Index of column ID_ESTATUS
	 */
	protected static final int COLUMN_ID_ESTATUS = 3;

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 4;

	/** 
	 * Index of column ID_CONCEPTO
	 */
	protected static final int COLUMN_ID_CONCEPTO = 5;

	/** 
	 * Index of column ID_USUARIO
	 */
	protected static final int COLUMN_ID_USUARIO = 6;

	/** 
	 * Index of column CANTIDAD
	 */
	protected static final int COLUMN_CANTIDAD = 7;

	/** 
	 * Index of column PRECIO
	 */
	protected static final int COLUMN_PRECIO = 8;

	/** 
	 * Index of column FECHA
	 */
	protected static final int COLUMN_FECHA = 9;

	/** 
	 * Index of column NOMBRE_EMBALAJE
	 */
	protected static final int COLUMN_NOMBRE_EMBALAJE = 10;

	/** 
	 * Index of column FECHA_CADUCIDAD
	 */
	protected static final int COLUMN_FECHA_CADUCIDAD = 11;
                 /** 
	 * Index of column UNIDADES ALMACEN
	 */
	protected static final int COLUMN_UNIDADES_ALMACEN = 12;
         /** 
	 * Index of column PRECIO OFERTA
	 */
	protected static final int COLUMN_PRECIO_OFERTA = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column ID_ESTANTERIA
	 */
	protected static final int PK_COLUMN_ID_ESTANTERIA = 1;

	/** 
	 * Inserts a new row in the estanteria table.
	 */
	public EstanteriaPk insert(Estanteria dto) throws EstanteriaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdEstanteriaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTANTERIA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_EMPRESA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_ESTATUS" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdClienteModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CLIENTE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isIdUsuarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "ID_USUARIO" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "CANTIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO" );
				values.append( "?" );
				modifiedCount++;
			}
                        
                        if (dto.isUnidadesAlmacenModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "UNIDADES_ALMACEN" );
				values.append( "?" );
				modifiedCount++;
			}
                        if (dto.isPrecioOfertaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "PRECIO_OFERTA" );
				values.append( "?" );
				modifiedCount++;
			}
		
		
			if (dto.isFechaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreEmbalajeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "NOMBRE_EMBALAJE" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isFechaCaducidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "FECHA_CADUCIDAD" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString(), Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			if (dto.isIdEstanteriaModified()) {
				stmt.setInt( index++, dto.getIdEstanteria() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdClienteModified()) {
				if (dto.isIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCliente() );
				}
		
			}
		
			if (dto.isIdConceptoModified()) {
				if (dto.isIdConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConcepto() );
				}
		
			}
		
			if (dto.isIdUsuarioModified()) {
				if (dto.isIdUsuarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuario() );
				}
		
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isPrecioModified()) {
				if (dto.isPrecioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecio() );
				}
		
			}
                        if (dto.isUnidadesAlmacenModified()) {
				if (dto.isUnidadesAlmacenNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getUnidadesAlmacen() );
				}
		
			}
                        if (dto.isPrecioOfertaModified()) {
				if (dto.isPrecioOfertaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioOferta() );
				}
		
			}
		
			if (dto.isFechaModified()) {
				stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			}
		
			if (dto.isNombreEmbalajeModified()) {
				stmt.setString( index++, dto.getNombreEmbalaje() );
			}
		
			if (dto.isFechaCaducidadModified()) {
				stmt.setDate(index++, dto.getFechaCaducidad()==null ? null : new java.sql.Date( dto.getFechaCaducidad().getTime() ) );
			}
		
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdEstanteria( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstanteriaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the estanteria table.
	 */
	public void update(EstanteriaPk pk, Estanteria dto) throws EstanteriaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdEstanteriaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTANTERIA=?" );
				modified=true;
			}
		
			if (dto.isIdEmpresaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_EMPRESA=?" );
				modified=true;
			}
		
			if (dto.isIdEstatusModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_ESTATUS=?" );
				modified=true;
			}
		
			if (dto.isIdClienteModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CLIENTE=?" );
				modified=true;
			}
		
			if (dto.isIdConceptoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_CONCEPTO=?" );
				modified=true;
			}
		
			if (dto.isIdUsuarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ID_USUARIO=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CANTIDAD=?" );
				modified=true;
			}
		
			if (dto.isPrecioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO=?" );
				modified=true;
			}
                        if (dto.isUnidadesAlmacenModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "UNIDADES_ALMACEN=?" );
				modified=true;
			}
                        if (dto.isPrecioOfertaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRECIO_OFERTA=?" );
				modified=true;
			}
		
			if (dto.isFechaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA=?" );
				modified=true;
			}
		
			if (dto.isNombreEmbalajeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NOMBRE_EMBALAJE=?" );
				modified=true;
			}
		
			if (dto.isFechaCaducidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "FECHA_CADUCIDAD=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ID_ESTANTERIA=?" );
			System.out.println( "Executing " + sql.toString() + " with values: " + dto );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdEstanteriaModified()) {
				stmt.setInt( index++, dto.getIdEstanteria() );
			}
		
			if (dto.isIdEmpresaModified()) {
				if (dto.isIdEmpresaNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEmpresa() );
				}
		
			}
		
			if (dto.isIdEstatusModified()) {
				if (dto.isIdEstatusNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdEstatus() );
				}
		
			}
		
			if (dto.isIdClienteModified()) {
				if (dto.isIdClienteNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdCliente() );
				}
		
			}
		
			if (dto.isIdConceptoModified()) {
				if (dto.isIdConceptoNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdConcepto() );
				}
		
			}
		
			if (dto.isIdUsuarioModified()) {
				if (dto.isIdUsuarioNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getIdUsuario() );
				}
		
			}
		
			if (dto.isCantidadModified()) {
				if (dto.isCantidadNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getCantidad() );
				}
		
			}
		
			if (dto.isPrecioModified()) {
				if (dto.isPrecioNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecio() );
				}
		
			}
                        if (dto.isUnidadesAlmacenModified()) {
				if (dto.isUnidadesAlmacenNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getUnidadesAlmacen() );
				}
		
			}
                        if (dto.isPrecioOfertaModified()) {
				if (dto.isPrecioOfertaNull()) {
					stmt.setNull( index++, java.sql.Types.DOUBLE );
				} else {
					stmt.setDouble( index++, dto.getPrecioOferta() );
				}
		
			}
		
			if (dto.isFechaModified()) {
				stmt.setDate(index++, dto.getFecha()==null ? null : new java.sql.Date( dto.getFecha().getTime() ) );
			}
		
			if (dto.isNombreEmbalajeModified()) {
				stmt.setString( index++, dto.getNombreEmbalaje() );
			}
		
			if (dto.isFechaCaducidadModified()) {
				stmt.setDate(index++, dto.getFechaCaducidad()==null ? null : new java.sql.Date( dto.getFechaCaducidad().getTime() ) );
			}
		
			stmt.setInt( index++, pk.getIdEstanteria() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstanteriaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the estanteria table.
	 */
	public void delete(EstanteriaPk pk) throws EstanteriaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdEstanteria() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstanteriaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the estanteria table that matches the specified primary-key value.
	 */
	public Estanteria findByPrimaryKey(EstanteriaPk pk) throws EstanteriaDaoException
	{
		return findByPrimaryKey( pk.getIdEstanteria() );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_ESTANTERIA = :idEstanteria'.
	 */
	public Estanteria findByPrimaryKey(int idEstanteria) throws EstanteriaDaoException
	{
		Estanteria ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTANTERIA = ?", new Object[] {  new Integer(idEstanteria) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria ''.
	 */
	public Estanteria[] findAll() throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_ESTANTERIA", null );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_ESTANTERIA = :idEstanteria'.
	 */
	public Estanteria[] findWhereIdEstanteriaEquals(int idEstanteria) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTANTERIA = ? ORDER BY ID_ESTANTERIA", new Object[] {  new Integer(idEstanteria) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_EMPRESA = :idEmpresa'.
	 */
	public Estanteria[] findWhereIdEmpresaEquals(int idEmpresa) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_EMPRESA = ? ORDER BY ID_EMPRESA", new Object[] {  new Integer(idEmpresa) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_ESTATUS = :idEstatus'.
	 */
	public Estanteria[] findWhereIdEstatusEquals(int idEstatus) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_ESTATUS = ? ORDER BY ID_ESTATUS", new Object[] {  new Integer(idEstatus) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public Estanteria[] findWhereIdClienteEquals(int idCliente) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_CONCEPTO = :idConcepto'.
	 */
	public Estanteria[] findWhereIdConceptoEquals(int idConcepto) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CONCEPTO = ? ORDER BY ID_CONCEPTO", new Object[] {  new Integer(idConcepto) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'ID_USUARIO = :idUsuario'.
	 */
	public Estanteria[] findWhereIdUsuarioEquals(int idUsuario) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_USUARIO = ? ORDER BY ID_USUARIO", new Object[] {  new Integer(idUsuario) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'CANTIDAD = :cantidad'.
	 */
	public Estanteria[] findWhereCantidadEquals(double cantidad) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CANTIDAD = ? ORDER BY CANTIDAD", new Object[] {  new Double(cantidad) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'PRECIO = :precio'.
	 */
	public Estanteria[] findWherePrecioEquals(double precio) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECIO = ? ORDER BY PRECIO", new Object[] {  new Double(precio) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'FECHA = :fecha'.
	 */
	public Estanteria[] findWhereFechaEquals(Date fecha) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA = ? ORDER BY FECHA", new Object[] { fecha==null ? null : new java.sql.Date( fecha.getTime() ) } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'NOMBRE_EMBALAJE = :nombreEmbalaje'.
	 */
	public Estanteria[] findWhereNombreEmbalajeEquals(String nombreEmbalaje) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOMBRE_EMBALAJE = ? ORDER BY NOMBRE_EMBALAJE", new Object[] { nombreEmbalaje } );
	}

	/** 
	 * Returns all rows from the estanteria table that match the criteria 'FECHA_CADUCIDAD = :fechaCaducidad'.
	 */
	public Estanteria[] findWhereFechaCaducidadEquals(Date fechaCaducidad) throws EstanteriaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FECHA_CADUCIDAD = ? ORDER BY FECHA_CADUCIDAD", new Object[] { fechaCaducidad==null ? null : new java.sql.Date( fechaCaducidad.getTime() ) } );
	}

	/**
	 * Method 'EstanteriaDaoImpl'
	 * 
	 */
	public EstanteriaDaoImpl()
	{
	}

	/**
	 * Method 'EstanteriaDaoImpl'
	 * 
	 * @param userConn
	 */
	public EstanteriaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "estanteria";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Estanteria fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Estanteria dto = new Estanteria();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Estanteria[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Estanteria dto = new Estanteria();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Estanteria ret[] = new Estanteria[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Estanteria dto, ResultSet rs) throws SQLException
	{
		dto.setIdEstanteria( rs.getInt( COLUMN_ID_ESTANTERIA ) );
		dto.setIdEmpresa( rs.getInt( COLUMN_ID_EMPRESA ) );
		if (rs.wasNull()) {
			dto.setIdEmpresaNull( true );
		}
		
		dto.setIdEstatus( rs.getInt( COLUMN_ID_ESTATUS ) );
		if (rs.wasNull()) {
			dto.setIdEstatusNull( true );
		}
		
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		if (rs.wasNull()) {
			dto.setIdClienteNull( true );
		}
		
		dto.setIdConcepto( rs.getInt( COLUMN_ID_CONCEPTO ) );
		if (rs.wasNull()) {
			dto.setIdConceptoNull( true );
		}
		
		dto.setIdUsuario( rs.getInt( COLUMN_ID_USUARIO ) );
		if (rs.wasNull()) {
			dto.setIdUsuarioNull( true );
		}
		
		dto.setCantidad( rs.getDouble( COLUMN_CANTIDAD ) );
		if (rs.wasNull()) {
			dto.setCantidadNull( true );
		}
		
		dto.setPrecio( rs.getDouble( COLUMN_PRECIO ) );
		if (rs.wasNull()) {
			dto.setPrecioNull( true );
		}
                dto.setUnidadesAlmacen( rs.getDouble( COLUMN_UNIDADES_ALMACEN ) );
		if (rs.wasNull()) {
			dto.setUnidadesAlmacenNull( true );
		}
                dto.setPrecioOferta( rs.getDouble( COLUMN_PRECIO_OFERTA ) );
		if (rs.wasNull()) {
			dto.setPrecioOfertaNull( true );
		}
		
		dto.setFecha( rs.getDate(COLUMN_FECHA ) );
		dto.setNombreEmbalaje( rs.getString( COLUMN_NOMBRE_EMBALAJE ) );
		dto.setFechaCaducidad( rs.getDate(COLUMN_FECHA_CADUCIDAD ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Estanteria dto)
	{
		dto.setIdEstanteriaModified( false );
		dto.setIdEmpresaModified( false );
		dto.setIdEstatusModified( false );
		dto.setIdClienteModified( false );
		dto.setIdConceptoModified( false );
		dto.setIdUsuarioModified( false );
		dto.setCantidadModified( false );
		dto.setPrecioModified( false );
		dto.setFechaModified( false );
		dto.setNombreEmbalajeModified( false );
		dto.setFechaCaducidadModified( false );
                dto.setUnidadesAlmacenModified(false);
                dto.setPrecioOfertaModified(false);
	}

	/** 
	 * Returns all rows from the estanteria table that match the specified arbitrary SQL statement
	 */
	public Estanteria[] findByDynamicSelect(String sql, Object[] sqlParams) throws EstanteriaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstanteriaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the estanteria table that match the specified arbitrary SQL statement
	 */
	public Estanteria[] findByDynamicWhere(String sql, Object[] sqlParams) throws EstanteriaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new EstanteriaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
